generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  avatarUrl       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  journals        CosmicJournal[]
  achievements    Achievement[]
  preferences     UserPreference?
  classrooms      ClassroomUser[]
}

model Event {
  id              String           @id @default(cuid())
  title           String
  description     String
  date            DateTime
  type            EventType
  significance    Int              @default(1)
  category        String
  country         String?
  agency          String?
  imageUrl        String?
  videoUrl        String?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  journalEntries  JournalEntry[]
}

model Mission {
  id              String           @id @default(cuid())
  name            String
  agency          String
  launchDate      DateTime
  endDate         DateTime?
  status          MissionStatus
  description     String
  objectives      String[]
  achievements    String[]
  spacecraft      String?
  destination     String?
  imageUrl        String?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Satellite {
  id              String           @id @default(cuid())
  noradId         String           @unique
  name            String
  type            String
  country         String
  launchDate      DateTime
  orbitType       String
  altitude        Float?
  inclination     Float?
  period          Float?
  isActive        Boolean          @default(true)
  tleData         Json?
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CosmicJournal {
  id              String           @id @default(cuid())
  userId          String
  title           String
  description     String?
  isPublic        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  user            User             @relation(fields: [userId], references: [id])
  entries         JournalEntry[]
}

model JournalEntry {
  id              String           @id @default(cuid())
  journalId       String
  eventId         String?
  title           String
  content         String
  date            DateTime
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  journal         CosmicJournal    @relation(fields: [journalId], references: [id])
  event           Event?           @relation(fields: [eventId], references: [id])
}

model Achievement {
  id              String           @id @default(cuid())
  userId          String
  type            AchievementType
  name            String
  description     String
  earnedAt        DateTime         @default(now())
  metadata        Json?
  
  user            User             @relation(fields: [userId], references: [id])
}

model UserPreference {
  id              String           @id @default(cuid())
  userId          String           @unique
  language        String           @default("en")
  voiceEnabled    Boolean          @default(true)
  hapticEnabled   Boolean          @default(true)
  soundEnabled    Boolean          @default(true)
  theme           String           @default("dark")
  notifications   Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  user            User             @relation(fields: [userId], references: [id])
}

model Classroom {
  id              String           @id @default(cuid())
  name            String
  code            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  users           ClassroomUser[]
  sessions        ClassroomSession[]
}

model ClassroomUser {
  id              String           @id @default(cuid())
  userId          String
  classroomId     String
  role            ClassroomRole
  joinedAt        DateTime         @default(now())
  
  user            User             @relation(fields: [userId], references: [id])
  classroom       Classroom        @relation(fields: [classroomId], references: [id])
  
  @@unique([userId, classroomId])
}

model ClassroomSession {
  id              String           @id @default(cuid())
  classroomId     String
  title           String
  content         Json
  startedAt       DateTime         @default(now())
  endedAt         DateTime?
  
  classroom       Classroom        @relation(fields: [classroomId], references: [id])
}

enum EventType {
  LAUNCH
  LANDING
  DISCOVERY
  MILESTONE
  DISASTER
  OBSERVATION
  ACHIEVEMENT
}

enum MissionStatus {
  PLANNED
  ACTIVE
  COMPLETED
  FAILED
  CANCELLED
}

enum AchievementType {
  EXPLORER
  RESEARCHER
  VOYAGER
  PIONEER
  COMMANDER
  ASTRONOMER
}

enum ClassroomRole {
  TEACHER
  STUDENT
}